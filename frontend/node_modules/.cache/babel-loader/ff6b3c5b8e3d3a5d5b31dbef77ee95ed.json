{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _defineProperty from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _classCallCheck from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _wrapNativeSuper from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\wrapNativeSuper.js\";\nimport _slicedToArray from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _toArray from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toArray.js\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\User\\\\User-auth\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/**\n * @remix-run/router v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash; // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to); // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    var decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  var stringify = function stringify(p) {\n    return p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  };\n\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    var keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n          key = _keyMatch[1],\n          optional = _keyMatch[2];\n\n      var param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      compiledParams = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = compiledParams.reduce(function (memo, _ref, index) {\n    var paramName = _ref.paramName,\n        isOptional = _ref.isOptional; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    var value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var params = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, function (_, paramName, isOptional) {\n    params.push({\n      paramName: paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(function (v) {\n      return decodeURIComponent(v).replace(/\\//g, \"%2F\");\n    }).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref6 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref6.pathname,\n      _ref6$search = _ref6.search,\n      search = _ref6$search === void 0 ? \"\" : _ref6$search,\n      _ref6$hash = _ref6.hash,\n      hash = _ref6$hash === void 0 ? \"\" : _ref6$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n} // Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\n\n\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  var pathMatches = getPathContributingMatches(matches); // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n\n  if (v7_relativeSplatPath) {\n    return pathMatches.map(function (match, idx) {\n      return idx === matches.length - 1 ? match.pathname : match.pathnameBase;\n    });\n  }\n\n  return pathMatches.map(function (match) {\n    return match.pathnameBase;\n  });\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1; // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref7 = _slicedToArray(_ref2, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, undefined, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeysSet.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n      // should always resolve with a value or null\n\n\n      if (error === undefined && data === undefined) {\n        var undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return undefinedError;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(undefinedError);\n      }\n\n      if (data === undefined) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signal) {\n        var _this5 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref3) {\n        var _ref8 = _slicedToArray(_ref3, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nvar redirectDocument = function redirectDocument(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nvar ErrorResponseImpl = /*#__PURE__*/_createClass(function ErrorResponseImpl(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponseImpl);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n};\n\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  var manifest = {}; // Routes in tree format for matching\n\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\";\n  var dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy; // Config driven behavior flags\n\n  var future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false\n  }, init.future); // Cleanup function for history\n\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized;\n  var hasLazyRoutes = initialMatches.some(function (m) {\n    return m.route.lazy;\n  });\n  var hasLoaders = initialMatches.some(function (m) {\n    return m.route.loader;\n  });\n\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    var loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    var errors = init.hydrationData ? init.hydrationData.errors : null;\n\n    var isRouteInitialized = function isRouteInitialized(m) {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      } // Explicitly opting-in to running on hydration\n\n\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      } // Otherwise, initialized if hydrated with data or an error\n\n\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    }; // If errors exist, don't consider routes below the boundary\n\n\n    if (errors) {\n      var idx = initialMatches.findIndex(function (m) {\n        return errors[m.route.id] !== undefined;\n      });\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  var pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  var appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  var removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  var activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  var deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location,\n          delta = _ref.delta; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            var blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers: blockers\n            });\n          }\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      var _saveAppliedTransitions = function _saveAppliedTransitions() {\n        return persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      };\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = function removePageHideEventListener() {\n        return routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n      };\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    var completedFetchers = [];\n    var deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach(function (fetcher, key) {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    } // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n\n\n    _toConsumableArray(subscribers).forEach(function (subscriber) {\n      return subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true\n      });\n    }); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(function (key) {\n        return state.fetchers.delete(key);\n      });\n      deletedFetchersKeys.forEach(function (key) {\n        return deleteFetcher(key);\n      });\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n\n    var _ref9 = _temp === void 0 ? {} : _temp,\n        flushSync = _ref9.flushSync; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    var blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach(function (_, k) {\n        return blockers.set(k, IDLE_BLOCKER);\n      });\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    var viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      var priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      var toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: blockers\n    }), {\n      viewTransitionOpts: viewTransitionOpts,\n      flushSync: flushSync === true\n    }); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, flushSync, blockerKey;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              flushSync = (opts && opts.unstable_flushSync) === true;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n\n              if (!blockerKey) {\n                _context2.next = 17;\n                break;\n              }\n\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  }); // Send the same navigation through\n\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  var blockers = new Map(state.blockers);\n                  blockers.set(blockerKey, IDLE_BLOCKER);\n                  updateState({\n                    blockers: blockers\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n\n            case 17:\n              _context2.next = 19;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace,\n                enableViewTransition: opts && opts.unstable_viewTransition,\n                flushSync: flushSync\n              });\n\n            case 19:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, flushSync, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionResult, actionResult, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(routesToUse, location, basename);\n              flushSync = (opts && opts.flushSync) === true; // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 17;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              }, {\n                flushSync: flushSync\n              });\n              return _context3.abrupt(\"return\");\n\n            case 17:\n              if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 20;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              }, {\n                flushSync: flushSync\n              });\n              return _context3.abrupt(\"return\");\n\n            case 20:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 26;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingActionResult = [findNearestBoundary(matches).route.id, {\n                type: ResultType.error,\n                error: opts.pendingError\n              }];\n              _context3.next = 36;\n              break;\n\n            case 26:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 36;\n                break;\n              }\n\n              _context3.next = 29;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace,\n                flushSync: flushSync\n              });\n\n            case 29:\n              actionResult = _context3.sent;\n\n              if (!actionResult.shortCircuited) {\n                _context3.next = 32;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 32:\n              pendingActionResult = actionResult.pendingActionResult;\n              loadingNavigation = getLoadingNavigation(location, opts.submission);\n              flushSync = false; // Create a GET request for the loaders\n\n              request = createClientSideRequest(init.history, request.url, request.signal);\n\n            case 36:\n              _context3.next = 38;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n\n            case 38:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 44;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 44:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, getActionDataForCommit(pendingActionResult), {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 46:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, results, replace, _location, boundaryMatch;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (opts === void 0) {\n                opts = {};\n              }\n\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = getSubmittingNavigation(location, submission);\n              updateState({\n                navigation: navigation\n              }, {\n                flushSync: opts.flushSync === true\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context4.next = 9;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 15;\n              break;\n\n            case 9:\n              _context4.next = 11;\n              return callDataStrategy(\"action\", request, [actionMatch], matches);\n\n            case 11:\n              results = _context4.sent;\n              result = results[0];\n\n              if (!request.signal.aborted) {\n                _context4.next = 15;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 15:\n              if (!isRedirectResult(result)) {\n                _context4.next = 20;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                _location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n                replace = _location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 19;\n              return startRedirectNavigation(request, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 19:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 20:\n              if (!isDeferredResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 22:\n              if (!isErrorResult(result)) {\n                _context4.next = 26;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                pendingActionResult: [boundaryMatch.route.id, result]\n              });\n\n            case 26:\n              return _context4.abrupt(\"return\", {\n                pendingActionResult: [actionMatch.route.id, result]\n              });\n\n            case 27:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21) {\n    return _handleLoaders.apply(this, arguments);\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n      var loadingNavigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n              activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              });\n              pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 10;\n                break;\n              }\n\n              _updatedFetchers = markFetchRedirectsDone();\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null\n              }, getActionDataForCommit(pendingActionResult), _updatedFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}), {\n                flushSync: flushSync\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 10:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              // If we have partialHydration enabled, then don't update the state for the\n              // initial data load since it's not a \"navigation\"\n              if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n                revalidatingFetchers.forEach(function (rf) {\n                  var fetcher = state.fetchers.get(rf.key);\n                  var revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n                  state.fetchers.set(rf.key, revalidatingFetcher);\n                });\n\n                if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n                  // This is cast to `any` currently because `RouteData`uses any and it\n                  // would be a breaking change to use any.\n                  // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n                  actionData = _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data);\n                } else if (state.actionData) {\n                  if (Object.keys(state.actionData).length === 0) {\n                    actionData = null;\n                  } else {\n                    actionData = state.actionData;\n                  }\n                }\n\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData !== undefined ? {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}), {\n                  flushSync: flushSync\n                });\n              }\n\n              revalidatingFetchers.forEach(function (rf) {\n                if (fetchControllers.has(rf.key)) {\n                  abortFetcher(rf.key);\n                }\n\n                if (rf.controller) {\n                  // Fetchers use an independent AbortController so that aborting a fetcher\n                  // (via deleteFetcher) does not abort the triggering navigation that\n                  // triggered the revalidation\n                  fetchControllers.set(rf.key, rf.controller);\n                }\n              }); // Proxy navigation abort through to revalidation fetchers\n\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (f) {\n                  return abortFetcher(f.key);\n                });\n              };\n\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n\n              _context5.next = 16;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 16:\n              _yield$callLoadersAnd = _context5.sent;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 21;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 21:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect([].concat(_toConsumableArray(loaderResults), _toConsumableArray(fetcherResults)));\n\n              if (!redirect) {\n                _context5.next = 29;\n                break;\n              }\n\n              if (redirect.idx >= matchesToLoad.length) {\n                // If this redirect came from a fetcher make sure we mark it in\n                // fetchRedirectIds so it doesn't get revalidated on the next set of\n                // loader executions\n                fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n                fetchRedirectIds.add(fetcherKey);\n              }\n\n              _context5.next = 28;\n              return startRedirectNavigation(request, redirect.result, {\n                replace: replace\n              });\n\n            case 28:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 29:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              }); // During partial hydration, preserve SSR errors for routes that don't re-run\n\n              if (future.v7_partialHydration && initialHydration && state.errors) {\n                Object.entries(state.errors).filter(function (_ref2) {\n                  var _ref11 = _slicedToArray(_ref2, 1),\n                      id = _ref11[0];\n\n                  return !matchesToLoad.some(function (m) {\n                    return m.route.id === id;\n                  });\n                }).forEach(function (_ref3) {\n                  var _ref12 = _slicedToArray(_ref3, 2),\n                      routeId = _ref12[0],\n                      error = _ref12[1];\n\n                  errors = Object.assign(errors || {}, _defineProperty({}, routeId, error));\n                });\n              }\n\n              updatedFetchers = markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, shouldUpdateFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 36:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var flushSync = (opts && opts.unstable_flushSync) === true;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync: flushSync\n      });\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission,\n        error = _normalizeNavigateOpt.error;\n\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync: flushSync\n      });\n      return;\n    }\n\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x22, _x23, _x24, _x25, _x26, _x27, _x28) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, routeId, path, match, requestMatches, flushSync, submission) {\n      var _error2, existingFetcher, abortController, fetchRequest, originatingLoadId, actionResults, actionResult, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData2, loaderData, errors, doneFetcher;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (!(!match.route.action && !match.route.lazy)) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2, {\n                flushSync: flushSync\n              });\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n                flushSync: flushSync\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context6.next = 14;\n              return callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n\n            case 14:\n              actionResults = _context6.sent;\n              actionResult = actionResults[0];\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!(future.v7_fetcherPersist && deletedFetchers.has(key))) {\n                _context6.next = 25;\n                break;\n              }\n\n              if (!(isRedirectResult(actionResult) || isErrorResult(actionResult))) {\n                _context6.next = 23;\n                break;\n              }\n\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context6.abrupt(\"return\");\n\n            case 23:\n              _context6.next = 38;\n              break;\n\n            case 25:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 35;\n                break;\n              }\n\n              fetchControllers.delete(key);\n\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context6.next = 32;\n                break;\n              }\n\n              // A new navigation was kicked off after our action started, so that\n              // should take precedence over this redirect navigation.  We already\n              // set isRevalidationRequired so all loaders for the new route should\n              // fire unless opted out via shouldRevalidate\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context6.abrupt(\"return\");\n\n            case 32:\n              fetchRedirectIds.add(key);\n              updateFetcherState(key, getLoadingFetcher(submission));\n              return _context6.abrupt(\"return\", startRedirectNavigation(fetchRequest, actionResult, {\n                fetcherSubmission: submission\n              }));\n\n            case 35:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 38;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 38:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 40;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 40:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = getLoadingFetcher(submission, actionResult.data);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n                state.fetchers.set(staleKey, revalidatingFetcher);\n\n                if (fetchControllers.has(staleKey)) {\n                  abortFetcher(staleKey);\n                }\n\n                if (rf.controller) {\n                  fetchControllers.set(staleKey, rf.controller);\n                }\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (rf) {\n                  return abortFetcher(rf.key);\n                });\n              };\n\n              abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              _context6.next = 56;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 56:\n              _yield$callLoadersAnd2 = _context6.sent;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 61;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 61:\n              abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect([].concat(_toConsumableArray(loaderResults), _toConsumableArray(fetcherResults)));\n\n              if (!redirect) {\n                _context6.next = 69;\n                break;\n              }\n\n              if (redirect.idx >= matchesToLoad.length) {\n                // If this redirect came from a fetcher make sure we mark it in\n                // fetchRedirectIds so it doesn't get revalidated on the next set of\n                // loader executions\n                fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n                fetchRedirectIds.add(fetcherKey);\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(revalidationRequest, redirect.result));\n\n            case 69:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n              // deleted, only put it back to idle if it hasn't been deleted\n\n              if (state.fetchers.has(key)) {\n                doneFetcher = getDoneFetcher(actionResult.data);\n                state.fetchers.set(key, doneFetcher);\n              }\n\n              abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n                  fetchers: new Map(state.fetchers)\n                });\n                isRevalidationRequired = false;\n              }\n\n            case 73:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x29, _x30, _x31, _x32, _x33, _x34, _x35) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, routeId, path, match, matches, flushSync, submission) {\n      var existingFetcher, abortController, fetchRequest, originatingLoadId, results, result;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key);\n              updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n                flushSync: flushSync\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context7.next = 8;\n              return callDataStrategy(\"loader\", fetchRequest, [match], matches);\n\n            case 8:\n              results = _context7.sent;\n              result = results[0]; // Deferred isn't supported for fetcher loads, await everything and treat it\n              // as a normal load.  resolveDeferredData will return undefined if this\n              // fetcher gets aborted, so we just leave result untouched and short circuit\n              // below if that happens\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by our our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!deletedFetchers.has(key)) {\n                _context7.next = 23;\n                break;\n              }\n\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context7.abrupt(\"return\");\n\n            case 23:\n              if (!isRedirectResult(result)) {\n                _context7.next = 33;\n                break;\n              }\n\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context7.next = 29;\n                break;\n              }\n\n              // A new navigation was kicked off after our loader started, so that\n              // should take precedence over this redirect navigation\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              fetchRedirectIds.add(key);\n              _context7.next = 32;\n              return startRedirectNavigation(fetchRequest, result);\n\n            case 32:\n              return _context7.abrupt(\"return\");\n\n            case 33:\n              if (!isErrorResult(result)) {\n                _context7.next = 36;\n                break;\n              }\n\n              setFetcherError(key, routeId, result.error);\n              return _context7.abrupt(\"return\");\n\n            case 36:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              updateFetcherState(key, getDoneFetcher(result.data));\n\n            case 38:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x36, _x37, _x38) {\n    return _startRedirectNavigation.apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(request, redirect, _temp2) {\n      var _ref13, submission, fetcherSubmission, replace, location, redirectLocation, isDocumentReload, url, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, activeSubmission, overrideNavigation;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref13 = _temp2 === void 0 ? {} : _temp2, submission = _ref13.submission, fetcherSubmission = _ref13.fetcherSubmission, replace = _ref13.replace;\n\n              if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n                isRevalidationRequired = true;\n              }\n\n              location = redirect.response.headers.get(\"Location\");\n              invariant(location, \"Expected a Location header on the redirect Response\");\n              location = normalizeRedirectLocation(location, new URL(request.url), basename);\n              redirectLocation = createLocation(state.location, location, {\n                _isRedirect: true\n              });\n\n              if (!isBrowser) {\n                _context8.next = 12;\n                break;\n              }\n\n              isDocumentReload = false;\n\n              if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n                // Hard reload if the response contained X-Remix-Reload-Document\n                isDocumentReload = true;\n              } else if (ABSOLUTE_URL_REGEX.test(location)) {\n                url = init.history.createURL(location);\n                isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n                url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n                stripBasename(url.pathname, basename) == null;\n              }\n\n              if (!isDocumentReload) {\n                _context8.next = 12;\n                break;\n              }\n\n              if (replace) {\n                routerWindow.location.replace(location);\n              } else {\n                routerWindow.location.assign(location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 12:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType;\n\n              if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n                submission = getSubmissionFromNavigation(state.navigation);\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              activeSubmission = submission || fetcherSubmission;\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))) {\n                _context8.next = 22;\n                break;\n              }\n\n              _context8.next = 20;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, activeSubmission, {\n                  formAction: location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 20:\n              _context8.next = 25;\n              break;\n\n            case 22:\n              // If we have a navigation submission, we will preserve it through the\n              // redirect navigation\n              overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n              _context8.next = 25;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: overrideNavigation,\n                // Send fetcher submissions through for shouldRevalidate\n                fetcherSubmission: fetcherSubmission,\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 25:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callDataStrategy(_x39, _x40, _x41, _x42) {\n    return _callDataStrategy.apply(this, arguments);\n  }\n\n  function _callDataStrategy() {\n    _callDataStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(type, request, matchesToLoad, matches) {\n      var results;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n\n            case 3:\n              results = _context9.sent;\n              _context9.next = 6;\n              return Promise.all(results.map(function (result, i) {\n                if (isRedirectHandlerResult(result)) {\n                  var response = result.result;\n                  return {\n                    type: ResultType.redirect,\n                    response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n                  };\n                }\n\n                return convertHandlerResultToDataResult(result);\n              }));\n\n            case 6:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 9:\n              _context9.prev = 9;\n              _context9.t0 = _context9[\"catch\"](0);\n              return _context9.abrupt(\"return\", matchesToLoad.map(function () {\n                return {\n                  type: ResultType.error,\n                  error: _context9.t0\n                };\n              }));\n\n            case 12:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[0, 9]]);\n    }));\n    return _callDataStrategy.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x43, _x44, _x45, _x46, _x47) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var _yield$Promise$all, _yield$Promise$all2, loaderResults, fetcherResults;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : []].concat(_toConsumableArray(fetchersToLoad.map(function (f) {\n                if (f.matches && f.match && f.controller) {\n                  var fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n                  return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(function (r) {\n                    return r[0];\n                  });\n                } else {\n                  return Promise.resolve({\n                    type: ResultType.error,\n                    error: getInternalRouterError(404, {\n                      pathname: f.path\n                    })\n                  });\n                }\n              }))));\n\n            case 2:\n              _yield$Promise$all = _context10.sent;\n              _yield$Promise$all2 = _toArray(_yield$Promise$all);\n              loaderResults = _yield$Promise$all2[0];\n              fetcherResults = _yield$Promise$all2.slice(1);\n              _context10.next = 8;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n                return request.signal;\n              }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n                return f.match;\n              }), fetcherResults, fetchersToLoad.map(function (f) {\n                return f.controller ? f.controller.signal : null;\n              }), true)]);\n\n            case 8:\n              return _context10.abrupt(\"return\", {\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 9:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      var count = (activeFetchers.get(key) || 0) - 1;\n\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = getDoneFetcher(fetcher.data);\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n            key = _step4$value[0],\n            id = _step4$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    var blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers: blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref4) {\n    var currentLocation = _ref4.currentLocation,\n        nextLocation = _ref4.nextLocation,\n        historyAction = _ref4.historyAction;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    var entries = Array.from(blockerFunctions.entries());\n\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n        blockerKey = _entries[0],\n        blockerFunction = _entries[1];\n\n    var blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      var key = getScrollRestorationKey(location, matches.map(function (m) {\n        return convertRouteMatchToUiMatch(m, state.loaderData);\n      }));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      var key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      var key = getScrollKey(location, matches);\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get future() {\n      return future;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Config driven behavior flags\n\n\n  var future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n\n  function query(_x48, _x49) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(request, _temp3) {\n      var _ref14, requestContext, skipLoaderErrorBubbling, unstable_dataStrategy, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref14 = _temp3 === void 0 ? {} : _temp3, requestContext = _ref14.requestContext, skipLoaderErrorBubbling = _ref14.skipLoaderErrorBubbling, unstable_dataStrategy = _ref14.unstable_dataStrategy;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n                _context11.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context11.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 11:\n              if (matches) {\n                _context11.next = 15;\n                break;\n              }\n\n              _error3 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context11.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error3),\n                statusCode: _error3.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 15:\n              _context11.next = 17;\n              return queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n\n            case 17:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 20;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 20:\n              return _context11.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x50, _x51) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, _temp4) {\n      var _ref15, routeId, requestContext, unstable_dataStrategy, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _ref15 = _temp4 === void 0 ? {} : _temp4, routeId = _ref15.routeId, requestContext = _ref15.requestContext, unstable_dataStrategy = _ref15.unstable_dataStrategy;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n                _context12.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context12.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context12.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context12.next = 20;\n              return queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n\n            case 20:\n              result = _context12.sent;\n\n              if (!isResponse(result)) {\n                _context12.next = 23;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context12.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              if (!result.actionData) {\n                _context12.next = 28;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", Object.values(result.actionData)[0]);\n\n            case 28:\n              if (!result.loaderData) {\n                _context12.next = 32;\n                break;\n              }\n\n              data = Object.values(result.loaderData)[0];\n\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n\n              return _context12.abrupt(\"return\", data);\n\n            case 32:\n              return _context12.abrupt(\"return\", undefined);\n\n            case 33:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x52, _x53, _x54, _x55, _x56, _x57, _x58) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context13.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context13.next = 7;\n                break;\n              }\n\n              _context13.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n\n            case 5:\n              _result = _context13.sent;\n              return _context13.abrupt(\"return\", _result);\n\n            case 7:\n              _context13.next = 9;\n              return loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n\n            case 9:\n              result = _context13.sent;\n              return _context13.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context13.prev = 13;\n              _context13.t0 = _context13[\"catch\"](1);\n\n              if (!(isHandlerResult(_context13.t0) && isResponse(_context13.t0.result))) {\n                _context13.next = 19;\n                break;\n              }\n\n              if (!(_context13.t0.type === ResultType.error)) {\n                _context13.next = 18;\n                break;\n              }\n\n              throw _context13.t0.result;\n\n            case 18:\n              return _context13.abrupt(\"return\", _context13.t0.result);\n\n            case 19:\n              if (!isRedirectResponse(_context13.t0)) {\n                _context13.next = 21;\n                break;\n              }\n\n              return _context13.abrupt(\"return\", _context13.t0);\n\n            case 21:\n              throw _context13.t0;\n\n            case 22:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x59, _x60, _x61, _x62, _x63, _x64, _x65) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n      var result, error, results, _error4, loaderRequest, boundaryMatch, _context14, context;\n\n      return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context15.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context15.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context15.next = 12;\n              break;\n\n            case 7:\n              _context15.next = 9;\n              return callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n\n            case 9:\n              results = _context15.sent;\n              result = results[0];\n\n              if (request.signal.aborted) {\n                throwStaticHandlerAbortedError(request, isRouteRequest, future);\n              }\n\n            case 12:\n              if (!isRedirectResult(result)) {\n                _context15.next = 14;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.response.status,\n                headers: {\n                  Location: result.response.headers.get(\"Location\")\n                }\n              });\n\n            case 14:\n              if (!isDeferredResult(result)) {\n                _context15.next = 19;\n                break;\n              }\n\n              _error4 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n              if (!isRouteRequest) {\n                _context15.next = 18;\n                break;\n              }\n\n              throw _error4;\n\n            case 18:\n              result = {\n                type: ResultType.error,\n                error: _error4\n              };\n\n            case 19:\n              if (!isRouteRequest) {\n                _context15.next = 23;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context15.next = 22;\n                break;\n              }\n\n              throw result.error;\n\n            case 22:\n              return _context15.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 23:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n\n              if (!isErrorResult(result)) {\n                _context15.next = 30;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n              _context15.next = 28;\n              return loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n\n            case 28:\n              _context14 = _context15.sent;\n              return _context15.abrupt(\"return\", _extends({}, _context14, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n              _context15.next = 32;\n              return loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n\n            case 32:\n              context = _context15.sent;\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data)\n              }, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionHeaders: result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {}\n              }));\n\n            case 34:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x66, _x67, _x68, _x69, _x70, _x71, _x72) {\n    return _loadRouteData.apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n                _context16.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader || m.route.lazy;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context16.next = 7;\n                break;\n              }\n\n              return _context16.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 7:\n              _context16.next = 9;\n              return callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n\n            case 9:\n              results = _context16.sent;\n\n              if (request.signal.aborted) {\n                throwStaticHandlerAbortedError(request, isRouteRequest, future);\n              } // Process and commit output from loaders\n\n\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context16.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n\n            case 16:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee15);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function callDataStrategy(_x73, _x74, _x75, _x76, _x77, _x78, _x79) {\n    return _callDataStrategy2.apply(this, arguments);\n  }\n\n  function _callDataStrategy2() {\n    _callDataStrategy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n      var results;\n      return _regeneratorRuntime.wrap(function _callee16$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n\n            case 2:\n              results = _context17.sent;\n              _context17.next = 5;\n              return Promise.all(results.map(function (result, i) {\n                if (isRedirectHandlerResult(result)) {\n                  var response = result.result; // Throw redirects and let the server handle them with an HTTP redirect\n\n                  // Throw redirects and let the server handle them with an HTTP redirect\n                  throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n                }\n\n                if (isResponse(result.result) && isRouteRequest) {\n                  // For SSR single-route requests, we want to hand Responses back\n                  // directly without unwrapping\n                  throw result;\n                }\n\n                return convertHandlerResultToDataResult(result);\n              }));\n\n            case 5:\n              return _context17.abrupt(\"return\", _context17.sent);\n\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee16);\n    }));\n    return _callDataStrategy2.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  var method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n\n    var _iterator5 = _createForOfIteratorHelper(matches),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var match = _step5.value;\n        contextualMatches.push(match);\n\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  var path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  var getInvalidBodyError = function getInvalidBodyError() {\n    return {\n      path: path,\n      error: getInternalRouterError(400, {\n        type: \"invalid-body\"\n      })\n    };\n  }; // Create a Submission on non-GET navigations\n\n\n  var rawFormMethod = opts.formMethod || \"get\";\n  var formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  var formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      var text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce(function (acc, _ref5) {\n        var _ref19 = _slicedToArray(_ref5, 2),\n            name = _ref19[0],\n            value = _ref19[1];\n\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path: path,\n        submission: {\n          formMethod: formMethod,\n          formAction: formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text: text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        var _json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path: path,\n          submission: {\n            formMethod: formMethod,\n            formAction: formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json: _json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  var searchParams;\n  var formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  var submission = {\n    formMethod: formMethod,\n    formAction: formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData: formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path: path,\n      submission: submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  var actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  var boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches; // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n\n  var actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  var shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    var route = match.route;\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n\n      return state.loaderData[route.id] === undefined && ( // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(function (m) {\n      return m.route.id === f.routeId;\n    }) || deletedFetchers.has(key)) {\n      return;\n    }\n\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    var fetcher = state.fetchers.get(key);\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    var shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nfunction loadLazyRouteModule(_x80, _x81, _x82) {\n  return _loadLazyRouteModule.apply(this, arguments);\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\n\n\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime.wrap(function _callee17$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            if (route.lazy) {\n              _context18.next = 2;\n              break;\n            }\n\n            return _context18.abrupt(\"return\");\n\n          case 2:\n            _context18.next = 4;\n            return route.lazy();\n\n          case 4:\n            lazyRoute = _context18.sent;\n\n            if (route.lazy) {\n              _context18.next = 7;\n              break;\n            }\n\n            return _context18.abrupt(\"return\");\n\n          case 7:\n            routeToUpdate = manifest[route.id];\n            invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n            // we could yet be sitting on this route as we can't get there without\n            // resolving lazy() first.\n            //\n            // This is different than the HMR \"update\" use-case where we may actively be\n            // on the route being updated.  The main concern boils down to \"does this\n            // mutation affect any ongoing navigations or any current state.matches\n            // values?\".  If not, it should be safe to update in place.\n\n            routeUpdates = {};\n\n            for (lazyRouteProperty in lazyRoute) {\n              staticRouteValue = routeToUpdate[lazyRouteProperty];\n              isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n              // on the route updates\n              lazyRouteProperty !== \"hasErrorBoundary\";\n              warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n              if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n                routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n              }\n            } // Mutate the route with the provided updates.  Do this first so we pass\n            // the updated version to mapRouteProperties\n\n\n            Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n            // updates and remove the `lazy` function so we don't resolve the lazy\n            // route again.\n\n            Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n              lazy: undefined\n            }));\n\n          case 13:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(function (m) {\n    return m.resolve();\n  }));\n}\n\nfunction callDataStrategyImpl(_x83, _x84, _x85, _x86, _x87, _x88, _x89, _x90) {\n  return _callDataStrategyImpl.apply(this, arguments);\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\n\n\nfunction _callDataStrategyImpl() {\n  _callDataStrategyImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n    var routeIdsToLoad, loadedMatches, results;\n    return _regeneratorRuntime.wrap(function _callee18$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            routeIdsToLoad = matchesToLoad.reduce(function (acc, m) {\n              return acc.add(m.route.id);\n            }, new Set());\n            loadedMatches = new Set(); // Send all matches here to allow for a middleware-type implementation.\n            // handler will be a no-op for unneeded routes and we filter those results\n            // back out below.\n\n            _context19.next = 4;\n            return dataStrategyImpl({\n              matches: matches.map(function (match) {\n                var shouldLoad = routeIdsToLoad.has(match.route.id); // `resolve` encapsulates the route.lazy, executing the\n                // loader/action, and mapping return values/thrown errors to a\n                // HandlerResult.  Users can pass a callback to take fine-grained control\n                // over the execution of the loader/action\n\n                // `resolve` encapsulates the route.lazy, executing the\n                // loader/action, and mapping return values/thrown errors to a\n                // HandlerResult.  Users can pass a callback to take fine-grained control\n                // over the execution of the loader/action\n                var resolve = function resolve(handlerOverride) {\n                  loadedMatches.add(match.route.id);\n                  return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n                    type: ResultType.data,\n                    result: undefined\n                  });\n                };\n\n                return _extends({}, match, {\n                  shouldLoad: shouldLoad,\n                  resolve: resolve\n                });\n              }),\n              request: request,\n              params: matches[0].params,\n              context: requestContext\n            });\n\n          case 4:\n            results = _context19.sent;\n            // Throw if any loadRoute implementations not called since they are what\n            // ensures a route is fully loaded\n            matches.forEach(function (m) {\n              return invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\");\n            }); // Filter out any middleware-only matches for which we didn't need to run handlers\n\n            return _context19.abrupt(\"return\", results.filter(function (_, i) {\n              return routeIdsToLoad.has(matches[i].route.id);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee18);\n  }));\n  return _callDataStrategyImpl.apply(this, arguments);\n}\n\nfunction callLoaderOrAction(_x91, _x92, _x93, _x94, _x95, _x96, _x97) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n    var result, onReject, runHandler, handler, handlerError, _yield$Promise$all3, _yield$Promise$all4, value, url, pathname, _url, _pathname;\n\n    return _regeneratorRuntime.wrap(function _callee20$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            runHandler = function runHandler(handler) {\n              // Setup a promise we can race against so that abort signals short circuit\n              var reject; // This will never resolve so safe to type it as Promise<HandlerResult> to\n              // satisfy the function return value\n\n              var abortPromise = new Promise(function (_, r) {\n                return reject = r;\n              });\n\n              onReject = function onReject() {\n                return reject();\n              };\n\n              request.signal.addEventListener(\"abort\", onReject);\n\n              var actualHandler = function actualHandler(ctx) {\n                if (typeof handler !== \"function\") {\n                  return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n                }\n\n                return handler.apply(void 0, [{\n                  request: request,\n                  params: match.params,\n                  context: staticContext\n                }].concat(_toConsumableArray(ctx !== undefined ? [ctx] : [])));\n              };\n\n              var handlerPromise;\n\n              if (handlerOverride) {\n                handlerPromise = handlerOverride(function (ctx) {\n                  return actualHandler(ctx);\n                });\n              } else {\n                handlerPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n                  var val;\n                  return _regeneratorRuntime.wrap(function _callee19$(_context20) {\n                    while (1) {\n                      switch (_context20.prev = _context20.next) {\n                        case 0:\n                          _context20.prev = 0;\n                          _context20.next = 3;\n                          return actualHandler();\n\n                        case 3:\n                          val = _context20.sent;\n                          return _context20.abrupt(\"return\", {\n                            type: \"data\",\n                            result: val\n                          });\n\n                        case 7:\n                          _context20.prev = 7;\n                          _context20.t0 = _context20[\"catch\"](0);\n                          return _context20.abrupt(\"return\", {\n                            type: \"error\",\n                            result: _context20.t0\n                          });\n\n                        case 10:\n                        case \"end\":\n                          return _context20.stop();\n                      }\n                    }\n                  }, _callee19, null, [[0, 7]]);\n                }))();\n              }\n\n              return Promise.race([handlerPromise, abortPromise]);\n            };\n\n            _context21.prev = 1;\n            handler = match.route[type];\n\n            if (!match.route.lazy) {\n              _context21.next = 33;\n              break;\n            }\n\n            if (!handler) {\n              _context21.next = 15;\n              break;\n            }\n\n            _context21.next = 7;\n            return Promise.all([// If the handler throws, don't let it immediately bubble out,\n            // since we need to let the lazy() execution finish so we know if this\n            // route has a boundary that can handle the error\n            runHandler(handler).catch(function (e) {\n              handlerError = e;\n            }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n\n          case 7:\n            _yield$Promise$all3 = _context21.sent;\n            _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 1);\n            value = _yield$Promise$all4[0];\n\n            if (!(handlerError !== undefined)) {\n              _context21.next = 12;\n              break;\n            }\n\n            throw handlerError;\n\n          case 12:\n            result = value;\n            _context21.next = 31;\n            break;\n\n          case 15:\n            _context21.next = 17;\n            return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n          case 17:\n            handler = match.route[type];\n\n            if (!handler) {\n              _context21.next = 24;\n              break;\n            }\n\n            _context21.next = 21;\n            return runHandler(handler);\n\n          case 21:\n            result = _context21.sent;\n            _context21.next = 31;\n            break;\n\n          case 24:\n            if (!(type === \"action\")) {\n              _context21.next = 30;\n              break;\n            }\n\n            url = new URL(request.url);\n            pathname = url.pathname + url.search;\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname: pathname,\n              routeId: match.route.id\n            });\n\n          case 30:\n            return _context21.abrupt(\"return\", {\n              type: ResultType.data,\n              result: undefined\n            });\n\n          case 31:\n            _context21.next = 42;\n            break;\n\n          case 33:\n            if (handler) {\n              _context21.next = 39;\n              break;\n            }\n\n            _url = new URL(request.url);\n            _pathname = _url.pathname + _url.search;\n            throw getInternalRouterError(404, {\n              pathname: _pathname\n            });\n\n          case 39:\n            _context21.next = 41;\n            return runHandler(handler);\n\n          case 41:\n            result = _context21.sent;\n\n          case 42:\n            invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context21.next = 48;\n            break;\n\n          case 45:\n            _context21.prev = 45;\n            _context21.t0 = _context21[\"catch\"](1);\n            return _context21.abrupt(\"return\", {\n              type: ResultType.error,\n              result: _context21.t0\n            });\n\n          case 48:\n            _context21.prev = 48;\n\n            if (onReject) {\n              request.signal.removeEventListener(\"abort\", onReject);\n            }\n\n            return _context21.finish(48);\n\n          case 51:\n            return _context21.abrupt(\"return\", result);\n\n          case 52:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, _callee20, null, [[1, 45, 48, 51]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction convertHandlerResultToDataResult(_x98) {\n  return _convertHandlerResultToDataResult.apply(this, arguments);\n} // Support relative routing in internal redirects\n\n\nfunction _convertHandlerResultToDataResult() {\n  _convertHandlerResultToDataResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(handlerResult) {\n    var result, type, status, data, contentType, _result$init, _result$init2;\n\n    return _regeneratorRuntime.wrap(function _callee21$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            result = handlerResult.result, type = handlerResult.type, status = handlerResult.status;\n\n            if (!isResponse(result)) {\n              _context22.next = 25;\n              break;\n            }\n\n            _context22.prev = 2;\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context22.next = 14;\n              break;\n            }\n\n            if (!(result.body == null)) {\n              _context22.next = 9;\n              break;\n            }\n\n            data = null;\n            _context22.next = 12;\n            break;\n\n          case 9:\n            _context22.next = 11;\n            return result.json();\n\n          case 11:\n            data = _context22.sent;\n\n          case 12:\n            _context22.next = 17;\n            break;\n\n          case 14:\n            _context22.next = 16;\n            return result.text();\n\n          case 16:\n            data = _context22.sent;\n\n          case 17:\n            _context22.next = 22;\n            break;\n\n          case 19:\n            _context22.prev = 19;\n            _context22.t0 = _context22[\"catch\"](2);\n            return _context22.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context22.t0\n            });\n\n          case 22:\n            if (!(type === ResultType.error)) {\n              _context22.next = 24;\n              break;\n            }\n\n            return _context22.abrupt(\"return\", {\n              type: ResultType.error,\n              error: new ErrorResponseImpl(result.status, result.statusText, data),\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 24:\n            return _context22.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 25:\n            if (!(type === ResultType.error)) {\n              _context22.next = 27;\n              break;\n            }\n\n            return _context22.abrupt(\"return\", {\n              type: ResultType.error,\n              error: result,\n              statusCode: isRouteErrorResponse(result) ? result.status : status\n            });\n\n          case 27:\n            if (!isDeferredData(result)) {\n              _context22.next = 29;\n              break;\n            }\n\n            return _context22.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result,\n              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n              headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n            });\n\n          case 29:\n            return _context22.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result,\n              statusCode: status\n            });\n\n          case 30:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, _callee21, null, [[2, 19]]);\n  }));\n  return _convertHandlerResultToDataResult.apply(this, arguments);\n}\n\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  var location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    var trimmedMatches = matches.slice(0, matches.findIndex(function (m) {\n      return m.route.id === routeId;\n    }) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    var normalizedLocation = location;\n    var url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    var isSameBasename = stripBasename(url.pathname, basename) != null;\n\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n\n  return location;\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, typeof value === \"string\" ? value : value.name);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  var formData = new FormData();\n\n  var _iterator7 = _createForOfIteratorHelper(searchParams.entries()),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n          key = _step7$value[0],\n          value = _step7$value[1];\n\n      formData.append(key, value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {};\n  var pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        var boundaryMatch = findNearestBoundary(matches, id);\n\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = _defineProperty({}, pendingActionResult[0], pendingError);\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  ),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n        key = _revalidatingFetchers.key,\n        match = _revalidatingFetchers.match,\n        controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator8 = _createForOfIteratorHelper(matches),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data)\n  };\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.length === 1 ? routes[0] : routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp5) {\n  var _ref20 = _temp5 === void 0 ? {} : _temp5,\n      pathname = _ref20.pathname,\n      routeId = _ref20.routeId,\n      method = _ref20.method,\n      type = _ref20.type;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        result: result,\n        idx: i\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\n\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nfunction resolveDeferredResults(_x99, _x100, _x101, _x102, _x103, _x104) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n\n    return _regeneratorRuntime.wrap(function _callee22$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader, signal;\n              return _regeneratorRuntime.wrap(function _loop$(_context23) {\n                while (1) {\n                  switch (_context23.prev = _context23.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n\n                      if (match) {\n                        _context23.next = 4;\n                        break;\n                      }\n\n                      return _context23.abrupt(\"return\", \"continue\");\n\n                    case 4:\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context23.next = 11;\n                        break;\n                      }\n\n                      // Note: we do not have to touch activeDeferreds here since we race them\n                      // against the signal in resolveDeferredData and they'll get aborted\n                      // there if needed\n                      signal = signals[index];\n                      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                      _context23.next = 11;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 11:\n                    case \"end\":\n                      return _context23.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context24.next = 10;\n              break;\n            }\n\n            return _context24.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            _ret = _context24.t0;\n\n            if (!(_ret === \"continue\")) {\n              _context24.next = 7;\n              break;\n            }\n\n            return _context24.abrupt(\"continue\", 7);\n\n          case 7:\n            index++;\n            _context24.next = 2;\n            break;\n\n          case 10:\n          case \"end\":\n            return _context24.stop();\n        }\n      }\n    }, _callee22);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x105, _x106, _x107) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime.wrap(function _callee23$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context25.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context25.sent;\n\n            if (!aborted) {\n              _context25.next = 6;\n              break;\n            }\n\n            return _context25.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context25.next = 14;\n              break;\n            }\n\n            _context25.prev = 7;\n            return _context25.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context25.prev = 11;\n            _context25.t0 = _context25[\"catch\"](7);\n            return _context25.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context25.t0\n            });\n\n          case 14:\n            return _context25.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context25.stop();\n        }\n      }\n    }, _callee23, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  var formMethod = navigation.formMethod,\n      formAction = navigation.formAction,\n      formEncType = navigation.formEncType,\n      text = navigation.text,\n      formData = navigation.formData,\n      json = navigation.json;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: undefined,\n      text: text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    var navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    var _navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return _navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  var navigation = {\n    state: \"submitting\",\n    location: location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    var fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data\n    };\n    return fetcher;\n  } else {\n    var _fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data: data\n    };\n    return _fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  var fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  var fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data: data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    var sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      var _json2 = JSON.parse(sessionPositions);\n\n      for (var _i = 0, _Object$entries = Object.entries(_json2 || {}); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            k = _Object$entries$_i[0],\n            v = _Object$entries$_i[1];\n\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    var _json3 = {};\n\n    var _iterator9 = _createForOfIteratorHelper(transitions),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _step9$value = _slicedToArray(_step9.value, 2),\n            k = _step9$value[0],\n            v = _step9$value[1];\n\n        _json3[k] = _toConsumableArray(v);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(_json3));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"sources":["C:\\Users\\User\\User-auth\\frontend\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\User\\User-auth\\frontend\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\User\\User-auth\\frontend\\node_modules\\@remix-run\\router\\router.ts"],"names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","deferredKeys","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","k","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unstable_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","_ref","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","type","actionResult","handleAction","shortCircuited","getLoadingNavigation","handleLoaders","fetcherSubmission","getActionDataForCommit","getSubmittingNavigation","actionMatch","getTargetMatch","method","routeId","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","isErrorResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","_ref3","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","isDocumentReload","redirectHistoryAction","callDataStrategyImpl","all","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","currentMatches","fetchersToLoad","fetcherRequest","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","convertRouteMatchToUiMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","v7_throwAbortReason","query","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isHandlerResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","getResolveToMatches","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","unstable_actionStatus","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","routeIdsToLoad","loadedMatches","shouldLoad","handlerOverride","callLoaderOrAction","staticContext","runHandler","handler","onReject","actualHandler","ctx","handlerPromise","val","handlerError","handlerResult","contentType","isDeferredData","deferred","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","errorMessage","resolveData","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData\n  status?: number;\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  unstable_actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  unstable_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n\n      let actionData: Record<string, RouteData> | null | undefined;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data as any,\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData !== undefined ? { actionData } : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type, status } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result, statusCode: status };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"]},"metadata":{},"sourceType":"module"}